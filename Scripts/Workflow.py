import csv
import pandas as pd
import MasterFunctionfile as mf
import os

#1
#Combine keepa exports and get "need to verify" and Verified
#OUTPUT: Keepa_Export_Combined.csv
input_files = ["KeepaExports\Scan1.csv","KeepaExports\Scan2.csv"]
# Merge each input file and export only the NEW items not in DB
#OUPUT: Keepa_Combined_Export.csv
'''
for file in input_files:
    if os.path.exists(file):
        mf.merge_csv(file)
    else:
        print(f"File '{file}' not found.")
'''

#1.5
#IF RUNNING THIS, SKIP 2
#Input: Keepa_Combined_Export.csv NEW items which have Black_list and PID column with filled data
#Output: Is the Output_File ready to go directly into MasterDB and MasterV
Prepare_Import_File = "KeepaExports\Keepa_Combined_Export.csv"
Output_File = "KeepaExports/prepared_output.csv"
#mf.prepare_manual_only_import(Prepare_Import_File, Output_File)


#2
#Run Google_Scrapping.py with the output of #1
#It Will the file with name XYZ_Can_LIST.csv -> Send it to MANUAL SCANNER
#mf.create_manualcheck_file("Birkenstock_1_All_PRODUCTS.csv")   


#3
#Update MasterDB link and BlackList from ManualCheck
#Output: No ouput. Just updates MasterDB
#The prepared_output is the file with Black_List and PID column filled out
update_csv_path = "KeepaExports/prepared_output.csv" #'ManualCheck.csv'
master_db_path = 'DataBaseFiles/Master_DB.csv'
#Below should be changed to master_db_path after testing
manual_Update_Ouput = master_db_path
#**CODE BELOW---------
#TRY THIS NEW CODE
##mf.update_master_db_w_manualcheck(master_db_path, update_csv_path)

#Below updates masterDB from prepared_output
#mf.update_master_db_without_gogolescrappingpy(master_db_path, update_csv_path,manual_Update_Ouput)


#4
#Take manual verified which is already in DB updates MasterV and Black_Listed_Y file. 
input_file = "KeepaExports/prepared_output.csv"
master_db_file = 'DataBaseFiles/Master_DB.csv'
master_v_file = 'DataBaseFiles/MasterV.csv'
Black_Listed_Y = 'DataBaseFiles/Black_Listed_Y.csv'  # These are blacklisted Y
#**CODE BELOW---------
#mf.Update_DB_After_ManualV(input_file, master_db_file, master_v_file, Black_Listed_Y)

  


# Combine the CSV outputs from keep into one file
#mf.combine_csv_files(r"KeepaExports\file1_export.csv", r"KeepaExports\file2_export.csv", r"KeepaExports\file3_export.csv")


#5
#This takes Keepa_update which is all the verified Listings and updates the masterV with current Buybox:current, current, and store 
#Need to pull the updated data from Keepa. In this section you can neglect certain brands
#OUTPUT this will update MasterV
#CODE BELOW
#mf.update_master_v('KeepaExports\Keepa_Update.csv', 'DataBaseFiles\MasterV.csv')


#6
#Tells us if we can list a product. Updates (Amazon_List_price)
#Here we can use filter_and_export to neglect any brand before running
#EXPORT: Updates MasterV to itself
MasterV_Brands_To_Update = 'DataBaseFiles\MasterV.csv'
master_db = 'DataBaseFiles/Master_DB.csv'
Output_File_Price_Update = 'DataBaseFiles\MasterV.csv'
brands_1 = ["Birkenstock", "Cole Haan", "Champion", "TYR", "Tommy Hilfiger", "Skechers"]
#brands_2 = ["Laura Mercier", "New Balance","Speedo", "Steve Madden", "Kate Spade New York", "Tory Burch"]
#brands_3 = ["Kate Spade New York", "Tory Burch","Tommy Hilfiger","NIKE", "Columbia"]
#brands_4 = ["Birkenstock", "Cole Haan", "Champion", "TYR", "Tommy Hilfiger","Laura Mercier","Speedo", "Steve Madden", "Kate Spade New York", "Tory Burch","Kate Spade New York", "Tory Burch","Tommy Hilfiger","NIKE"  ]

# This filters out specific brands so you run keepa with just those
#mf.keepa_asin_import(brands_1)

#**CODE BELOW---------

#mf.update_pricing_concurrently(MasterV_Brands_To_Update, master_db, Output_File_Price_Update, brands_1)

#mf.upload_file(r"C:\Users\Administrator\Documents\RA\DataBaseFiles\MasterV.csv")




#LIST PRODUCTS ON AMAZON

#7
#Now you want to update pricing of products mid-day with the new items added
#EXPORT this will update MasterV


#**CODE BELOW---------
#mf.update_master_v('KeepaExports\Keepa_Update.csv', 'DataBaseFiles\MasterV.csv')


#8
#Update our selling price (Amazon_List_price)
#EXPORT: Updates MAsterV to itself with the buy box current and current
MasterV = 'DataBaseFiles\MasterV.csv'
master_db = 'DataBaseFiles\Master_DB.csv'


#**CODE BELOW---------
#mf.update_pricing_concurrently(MasterV, master_db)

#LIST PRODUCTS ON AMAZON AGAIN
#GO TO SLEEP


#HELPER FUNCTIONS
#Count number of rows
#mf.count_rows("DataBaseFiles\MasterV.csv")

#Pulls Certain brands from MasterV file. This Can be used to update pricing without certain brands
UserG = ["Kate Spade", "Kate Spade New York", "New Balance", "Steve Madden", "THE NORTH FACE", "Tory Burch"]
#mf.filter_and_export("DataBaseFiles\MasterV.csv", UserG, "Goutham[DATE].csv")


#HelperFunctions
#mf.update_blacklist_from_master_v("example_asin", "Y")

""""

def parse_asins(asin_string):
    # Split the input string by newline characters and remove any empty strings
    asin_list = [asin.strip() for asin in asin_string.split("\n") if asin.strip()]
    return asin_list



asin_string = =
B073WH7KCP
B073WH5HG7
B073WH34W4
B07HNYTNKT
B073WHSX23
B085B6HF9T
B0CHXS1716
B09KWSGWHB
B07HCHYTQC
B079RJGKHH
B0CWH7CY1N
B0CWLKY3YQ
B0CWDGH6DS
B0BTJ9CNH2
B0B7W2VXWD
B0BZ951P4D
B0BZ95BLDX
B0BZ961P8H
B09HJPLQMR
B09HJCZTVF
B09HJJY6RZ
B0B3MJ3XN6
B0B3MHYXGM
B09HJTTH9Y
B09HJF329Y
B09HJHLKFK
B087Z7JTR6
B087Z75T1B
B0B1C37MMR
B0C2DT551R
B09DJLT9Q8
B0CVF58D84
B0CVF3LQXY
B0CCSKCKQP
B087Z6L86T
B0CW6CS7CQ
B0CW6BGXK6
B0CP4CV6SL
B0CTD9LX19
B0CTD9MCJ7
B087Z76W48
B09CCBT736
B0BP3MRDPC
B0CJ13WX41
B0C4RCD56G
B0C4RDR92V
B0B7VYP2HL
B0B7VQQJP3
B0CJD921MT
B082WKB71V
B085B6NZP5
B0BMNZCQQC
B000UD0T3K
B0CJ5ZPKF2
B0CJDHZG9G
B0CJD87FPV
B09PZBKRQW
B0B9BKC93J
B09PZG2YNQ
B0B3L7R9V9
B09PZ7ZC3C
B09PZF9NXK
B0B3KXBBJQ
B0B3LB3FKP
B0B3L1NDS9
B09PZ7WXLJ
B09PZ942VB
B0B3KKWCPF
B0B3LB4B8F
B09PZ86SG1
B09PZ8JH4X
B0B3L6LKJP
B0B3LHGV38
B0B3L21XWC
B09PZ8SZVF
B00HSIGBX2
B0CD1WZ1GH
B0CB24B5KQ
B0CB2387Q5
B0CB24N8RQ
B0CSHC8QCJ
B0CW2P1H3Z
B07W7W9BY4
B07W6RXZTX
B09CC8ZDZ4
B09CCK1C1P
B0CW6D7TV4
B0CW6BQMCV
B073WGNYMK
B07HNZX1DB
B07HNZ8XLY
B0777WD3M3
B08DH43646
B0CT8TWVPG
B07W7W98R3
B07HP15VTR
B07HNZH269
B073WGRXP6
B0BSMVQGXL
B09CCNWXQV
B09F6886GN
B07ZBZPP24
B07NZKNW48
B08J8DNHPN
B09G9THTFZ
B08Y68KN4C
B09PZ75WBR
B09PZ7GV62
B0CSGBKM61
B0BTTXHF9K
B0BTTWDGDW
B09HGSLF43
B07CBCTT9C
B07XJGP8DF
B087Z6WDG9
B09DKKG3H1
B07X9RRJQY
B0B5DBNNSV
B0CRHRG9WX
B0CKF2G7H3
B0CB23SPHG
B0CN36SS4N
B0CN3518SV
B07WS77VVH
B0CCVKXWRK
B07FBQBV65
B07H5VFPTW
B08DWH9J2L
B07FKX53WQ
B07GBHZV2N
B07FKV5GQB
B0BWX25P4D
B0BQR8LXR3
B0BQR8QRW7
B00KYM7D6I
B0BF14J8C7
B0CJDZMF96
B0CJDDXFZV
B0BTN447MX
B08PD21JHY
B08DWS5C6P
B08ZK3LQLK
B08ZK565XF
B0BNXBTLZP
B0BMW44Z8N
B0C4TCKSM5
B085Y2SD6P
B085Y34DRS
B085Y39DS7
B085Y34V9P
B0BVDCGM68
B085Y2VQ3G
B085Y3F1P2
B085Y32M3S
B085Y2ZS4R
B085Y35QLR
B085Y35QM9
B085Y3FMFP
B082N4MSCX
B085Y33BQH
B085Y3F1NY
B085Y2PD4C
B085Y2VXP2
B085Y2NZ3T
B085Y3BK6K
B085Y39DRM
B085Y3357Q
B085Y2JNS8
B085Y35QMG
B09B2VSN9L
B085Y3FMFX
B085Y2Z4YF
B085Y2PD4N
B085Y2JNSD
B085Y2TP3S
B0BWX1SGZQ
B0CN36X24V
B07VT5ZYR1
B073WH34DZ
B07ZBXGY5F
B0845GHLLG
B0BSMHNVWC
B0BSMRS1TJ
B0B1S2YH96
B0BSMDHB8V
B0BSMDNTDG
B096W91TWK
B014K2L6DS
B09DRT123V
B08BMM4H7D
B07XVTVCY9
B0BSRKVS1R
B0973G2DJ7
B09XYZ25SH
B0CSHTF4P2
B0CSH8ZC62
B0CSHK45DH
B0CSHC71X6
B0CSHC3VMN
B0B3MH9XLX
B09PR8PKH9
B09PR8NPZZ
B0864W7PMV
B09RPFS2QZ
B0CB23B9JJ
B0CB23GZQS
B0CB24KGVN
B0CB238KBQ
B07NJNRHJS
B07NJNRPN2
B07NJPSXKD
B08559Q4YY
B0BW2XN9Q8
B01KXSEPJ0
B09SP64M8L
B0BTTPF9XQ
B0B3SK58YT
B08DHLDZT8
B07TXM25BS
B08Y668LRW
B075ZYJZT8
B07GBHZ6RG
B077B7B6ND
B07GBHT9KT
B07YG2GY19
B07GBHMNSQ
B077B7YQCR
B08MV9V691
B086579Q87
B0CRGGK892
B09ZPWGJ32
B09T3L34P1
B09HJCZ8DL
B0858W9FK5
B0BN6WV9R6
B0BN6WN7Y9
B0842VX8RB
B0BWWZ9NWB
B0CB244JG1
B094PRBS2Z
B094Q3CWP9
B0CSKJ23RX
B01KXSEP22
B0C9M46113
B0CCSKJC8G
B08PC6V3CS
B07BT94WVJ
B079RL9KCD
B07GBK7V4X
B09VDL1PSC
B09VDH2239
B07P6M8Z8J
B07P885KN2
B013MBYIMO
B09XVKG49Y
B01KXSEI9W
B01KXSEJMS
B07QZXSMGR
B07HCJ4N9N
B0CBPLBTG2
B0BR8N8SVC
B0BXDK6J57
B08ZYVQYGB
B096KP8695
B086N2W1MK
B0B9BN3T4D
B08SG8JS5P
B0B8TJQCVV
B09PYG7H99
B09PYJ7861
B09PYGS48X
B0B8THDGFX
B09PYBK14H
B09PYHG4LS
B09SDNJHJN
B0CB243TLF
B09B2VYLG5
B0CSHJT5VJ
B0C33BVR5P
B082GVFHR9
B07XBRFXKZ
B0CF5B2GM9
B0B7BP2MVY
B0B7B4LT2H
B086523R3Y
B0921SN6ZD
B0921SGMCD
B07GBJ12G7
B07Z25B3LX
B07B2VKC66
B07BCF9NFQ
B07BCF6K5P
B01KXSECQ6
B0B1LNFCDM
B0B14GYMQ9
B0B14BL8WP
B0CB23HF54
B09ZPVVK4B
B09ZPWY3VF
B0BJ6113S8
B0BT7Y5CFR
B08TRPJGJY
B08VF9Y9SF
B09PR9K3TY
B0CDK9ZVS8
B0BWWZQSC8
B0CB239GMF
B0CB1SNNWR
B08Z6YP3JK
B0973YT38W
B07TYQZW5J
B0916VT1MZ
B0916VRC3Y
B09PZ7VCL1
B0916WJRJG
B0916TH5MF
B09VCVH4WH
B0CN34VBBJ
B0C4RLPJP1
B07YG2HH8M
B0916T9XVD
B0BMW3SHNM
B0CN34KLDP
B0CJFC8WFQ
B0CN36Y7DF
B08J89VHR6
B0865396QF
B0864YTL49
B0CFMTFXZZ
B085B6F12X
B07VXK5VMT
B09DK7P1MP
B0CHGVJ94C
B09NL8SGZH
B0CNM4WF3K
B0CF7F98NW
B0CB22VJLK
B0CB24HWM7
B07ZBYNTPH
B07ZBY6CQV
B07ZBZ98MW
B07ZBXR8SS
B0992WKWMX
B07YG1NDDT
B0CSGDS892
B09SP3T4TL
B09PZ7QWD5
B08Y693KHW
B07TXM2DG7
B0B2HDWLJ7
B09PZ7V67N
B09PZ92QRC
B09PZ6F2H9
B09PZ83QW8
B09PZ7WGNV
B0B49P7CGP
B0B49NGHQK
B09PZ9FYT9
B0CN35PBR9
B09HSBQ5CG
B08PC62BNV
B09VV8MF2P
B09VV9VZ1W
B09VVWMFCR
B094PMBBQR
B0CB1YQ2FD
B085B6PM6N
B09SP65MT6
B0CJF66XNP
B0CJDRC7VM
B0C34GNJQ8
B08659P3ZM
B0865B3PTT
B0B1464WVQ
B096KQ4RY9
B0C34FSDNF
B09PZ6PKLH
B09PZ7GJNV
B09PZ79VJX
B09HJQ36XM
B09BVCKJRC
B09BVF3PJ4
B0C4RL27KG
B09HGZ1L9H
B09HGVQL2W
B09HP8T3HB
B0CB23HLBV
B0BSMMRY2B
B078Z2D3CP
B0CSHGQ72X
B0B3HZJPGJ
B09QL99WMD
B09KWPZKD8
B0B9BLMMR5
B08FBDZDRF
B094PYZCSZ
B0BHDFR15P
B09PYMYS4P
B0BS91RL9W
B09PYGKKDY
B09PY89FFW
B09PY829NB
B09RW2CDM5
B0CSG9ZMQK
B07BCCSW5B
B07TSQ8FYN
B0CB1T47NM
B096W6FRB8
B093TW6L6G
B0BWX1DJHS
B0BWX13H4X
B0BWX1J69Z
B0BWWY2L46
B01KXSEII8
B01MZG9QS6
B00HR5IYA4
B09PYFQYC8
B0B7B6M7D7
B0B7BGY3DT
B0B9BN4KL1
B0B9BLG7WN
B09PR8JB9N
B0B9HPLX2J
B0C8T6D1D5
B098SZZMNC
B09PZ877KD
B09PZ9CQCN
B07P2TMYMV
B07NZKNV5L
B0BDVXTFYP
B0BSRFQ8DG
B07P5PJ6M5
B07WC7114M
B07CSPS4MP
B082XGZ1WR
B0B3MJSM2Q
B0B3LG22KM
B07CQVMPF8
B07CQYX1D1
B09NHWD6CT
B0C34715QL
B08SG4SC71
B09DK1L42W
B09DK55KDL
B0C4RMG69D
B0973BB5YG
B09PRBHKNM
B08SGCK7LW
B099ZCKRPH
B0B3HZS982
B08JGCJPVX
B096W9ND7X
B096W7T9T2
B096W9M7RQ
B09BVDT5P7
B09BVCG4LL
B099ZCTX25
B0CD1Y3HLQ
B09PZ76KJP
B08MTFFR66
B096KQ87VS
B0BWX16XQL
B0CB23PQ1L
B0CB25P91Z
B0BW7SF5G1
B0C7ZZML6F
B0916Y1FP1
B08DL7TCS2
B09ZD4ZH3B
B078XJW7Q3
B078XJ1MQP
B0B9HSDM9L
B09HJGZW4Z
B0864WYNQK
B08WSB4RBZ
B07MX7DTRY
B08PDB7RPS
B08PD9WL6Z
B09TVBNC5H
B0BMP5FY36
B0CJFBF9D8
B0CHFBC31V
B07L1D621Q
B07XCVK8S2
B07NXVNK7C
B07MX5Y39J
B09HP9N9TK
B099F95PPQ
B09PYLJB4S
B09PYHML5K
B09PYGPY37
B0CB23NGH2
B09RW2HJQ2
B0CB22QV7R
B0CN5JGYPV
B0CB2476X7
B0CB232YVX
B09PYSPMCK
B09PYQT12Y
B0BSXM6BTM
B0BTTX6NPZ
B098KNXQH1
B0CC3XL39K
B07ZBZNC9W
B07ZBZHN11
B0C4RJR94R
B09PZF9NNZ
B07MVKPFL3
B07MS8C9CF
B00LLI20YY
B0BN6VP1VT
B08Y681H6X
B08Y6CPPFS
B09PYB9WV1
B0BFG3P23B
B0BWX3621X
B0CSHSLDGK
B094RC6NSX
B095RP499L
B097C8T7DK
B08L3S4BXV
B08PC6P8TN
B085B6JYD6
B082WK5NG1
B08L5HFNL4
B07VB994VF
B09VDG6YKS
B01HN75QZG
B086CCHB2H
B01HN75R2I
B09P1BS9SC
B09PR8LJZH
B085B6J1QH
B08PC7YVYF
B08PC653R9
B08LDBG19V
B09PYF4W8B
B0C8R24FTR
B09PYMSS9G
B0CB232XQJ
B09DK3X277
B09DK3TPP9
B0BSMRHBTT
B0CCY3VR8R
B0CVS6PKLF
B0CW2Q176V
B01N0WH60D
B0CGTBH7W3
B0B9BP49QB
B0CSHSNMN4
B0CSHCQBRZ
B082KX6SS9
B084YQV4WY
B09XVKP22C
B09HJHMS8Y
B07CD1JRG4
B0BWPC4YDZ
B0BS9GW7R5
B0BT6PSNCL
B0858Y9JL5
B0CF9HZ31D
B08PC7C7HG
B08NFJZ66G
B08NFCMCJ8
B0B13V4FH4
B0B5Y6GKST
B09PZ7WR1J
B09PZ6M45S
B08PC4YM8X
B0BN6WJ4T2
B0CW2V6ZZ1
B07X371FQ5
B08L45BWRD
B0C2BC3NG9
B0CFN6JND8
B0BN2J5RPF
B08XJXT8TR
B0921TTC4F
B0BZ9193ZF
B08SGK3LBW
B08SGHFPYJ
B0CBPLFC6Z
B08PC6XMWY
B0BWX361Z7
B0BFR4F6JQ
B08ZB31B67
B09DK61K69
B09DK4CS28
B0864RBH49
B09TL95GT7
B09NL9M7Z4
B0981YL7VV
B09XYTZDP2
B09PYG1T4K
B09XZ7R95M
B0973F4QB1
B0973CM4CW
B09PR8CC7V
B0BZ96DJDG
B0CR54H3XK
B0BXSPDZTL
B09PY32S2K
B09PY9QMMK
B0BXSPJRC3
B09PYF31L7
B0CB23YZGH
B0BXSN4FC2
B09PYB6HZP
B09PYHRRC6
B09PYCQ16K
B09PYPVXZM
B09PYLG81W
B0CB22Q7MW
B09PYPNR5T
B09PYG72YX
B09PY7RBJC
B09PYKLZ7T
B09PYK96ZH
B0CN5JPK5Y
B09PYBN13G
B09PYJ5TZ7
B0B9XJH5PW
B09PYFRKB4
B09PYMQSL1
B09PY7GPWG
B0BS8PHGX2
B09PY6W68L
B09PYBSNNL
B09PYD1RBQ
B09PY5X4VF
B09PY82GDV
B0CB22X4KF
B0BR1BDPKX
B0B1LCW479
B07ZBZCDZC
B0BWX2BQKZ
B0B3MGVGFH
B09BVD4H1T
B08GB6LJVM
B09BVFRR4R
B09BVD6BMV
B09BVC2KT2
B09VDG44V8
B0CFCPX2JX
B09HSBKXVK
B09PR7TY65
B0973MN68T
B0BXX5213C
B08VFFTZ95
B0CDKHYJJM
B0CDKMJ9C4
B0CJDQPHVD
B098SYPG89
B0B45XSR5H
B09PRB3KB9
B082GVNBLJ
B0BSNBLZY3
B09HJJC4JQ
B097C8V97Q
B07H6BTLZC
B07FBP9T2J
B07FBRMTVD
B08WRSVJKR
B09VV5ZCLP
B09VVB5R8Z
B09VVGPZQ2
B0C9M28TS1
B08WX1JCCX
B097CSQ47G
B0CQV1XNVY
B09PR867X4
B0B3LXTVJC
B0BZ92T8TJ
B09NHWBXZ4
B09PZ82WR2
B09PZ7HMBX
B09PZ8CC46
B09PZ7R3C9
B0C4G7M8GS
B0CSGDCRYG
B00UBJ2F2Q
B08MTHBWCC
B0B1S9W6PG
B08MTGXP5J
B0BDVTS2QW
B0BZ9684RW
B09KP1NYP3
B0973CCLF7
B07BQXJL61
B08YHHW5T1
B07YG1XDMH
B07TSQ8FXF
B0CV2YZVTH
B0B4T4PJ8Z
B08QJPX6PL
B08TN15TMR
B09BCSPJPS
B0BSMHXCX7
B099DSLL1M
B07YG1R2NJ
B09PZ8FFZG
B0BMW5N8WX
B0CSKHVTLF
B0995Y988G
B0C4RMX5NZ
B08SGGK72T
B0CB22ZV21
B0C2BK3LFL
B00YHHDL8A
B07CR4PY2G
B07CR4TCF6
B0BF12S2L7
B0CC4T4V9Y
B0BFG45BXY
B084VCFY7R
B07ZCC46RV
B084VCQL1M
B0CN365MTW
B08PC7CT3R
B094TLKM9Z
B07ZBZL4F9
B06ZXWG6KN
B06W9N5423
B01L4N2CT8
B0CDYJXZZR
B0BTTR4VCL
B0BTTQQPDM
B0BQR93PR7
B099F9HPLQ
B099F915Z1
B099F9S6F9
B099FBXWSK
B099F8QK1X
B09TCGH4FF
B097BJ7RVN
B07P2RBH9K
B07P2RBH9L
B07HNZWMLZ
B09NL78YH9
B09NL791X4
B0CJDX3VHY
B083ZBLDCV
B0957NF535
B0864WQ1H8
B0BN6VMLQG
B09QLN3KK5
B09QLNCKH1
B07M6J18M5
B07H5WKSM2
B0CZPSZJXZ
B07FDCSHDG
B08DL7ZR3Z
B0B12DXLBH
B0BTMYPGHX
B0BWWZPVMP
B09HGSSQ77
B0BPQWSDKB
B0973DFCQ5
B0B4S7J2YL
B09BVFD1TL
B0B369548S
B09BVCH4D1
B09G9TQXK1
B0CKF1ZM55
B0992XX2M5
B0CJ66C4K8
B0BQR6R7S6
B0CSKHZ4SJ
B0794PRFY2
B0CSK6R44P
B08SGGXVP6
B08SG6PXR3
B08SG5488Y
B09NL9DP5G
B07YG3CZJP
B0829D1NR1
B07BCDTZXW
B07YG2CXTB
B0839NZ5T8
B085B6VPPZ
B078XH1L8G
B08656QNH4
B086XLHCX1
B0865BX4HR
B0864R9VXL
B0865BB58C
B08X1KVQ5Q
B086XKX6V2
B0CV37CMC8
B09QFL5MGF
B0B4Z5BTSS
B082N4KR8C
B0BMPKJPJ1
B0CC3YGJ12
B083M8KRZS
B083M9BQDB
B07YG364X8
B07YG3JZZM
B0992WDH85
B0992VRQZK
B08PC79BGM
B08PC6CC66
B08PC7G5P4
B0916X8FXG
B0916TPCWT
B0CMFF8PJR
B0C9M3M1KL
B0CN364SFZ
B07P3729MZ
B08SGTGDX5
B08SGN9DCZ
B0992WPX1W
B0CSKJ24Y3
B07BQXDZMV
B09PY56TFY
B0CB22D5T4
B09HGS8F8Q
B09HGXWQSP
B0CR52JCTX
B0BMW4Q7B8
B07YG3D9CD
B0CFCMQH3S
B09VVFK6ZV
B09PYBBVJG
B085B6412P
B07YG2J6PQ
B07YG2P6L3
B07YG2F3MC
B07TY21QY9
B086517TZQ
B07YG2T44S
B099F996Z3
B078XJP37N
B0CB1SRD7Y
B09HS9KWCT
B09HSBSCQS
B0BN796HB2
B0CC44KMXN
B0CSHLSBH6
B07H61FWS1
B0CJ15X1PZ
B0BF14YJS9
B07TTDL47G
B07TWJ1G4G
B08SGQM6Q6
B08SGB2YJN
B01HN57CQ4
B0CB2369CH
B085B6GX8L
B085B69SMF
B0BMVZQ778
B08GCQ195M
B09SNXK8LY
B0CN36FTJ6
B0C4RLGLJW
B07B9ZZRF6
B0B4ZNYSRV
B096W86PZ8
B096FGFP5G
B07TVPNZD3
B0794QVGTC
B099FB77KN
B08L8HS121
B0BN6V5N2F
B08GB3TSTX
B01M5BG081
B0BR8KG81B
B0049V1CIA
B07T1FB9H6
B08L9GQHG2
B08L9TXGLV
B08L9T3DXB
B0BHKY1WMF
B08L9RB163
B09P8CSDTZ
B085T6M3L5
B011PM90L6
B00LV5B6WE
B08L9T5JFH
B081ZVZJTC
B09QRKPHM2
B085T7L3TK
B0C382RHGT
B08SZ2J4M6
B06XDJT2Q9
B06XDGDDWR
B07494BH33
B0BR8KMFPM
B0BR8KG6FQ
B00EL3N2LG
B07YLKFR2C
B07H3B7GVZ
B07H3QN8NS
B07C1Y6V15
B00FQZPLU8
B00FQZPXKG
B0BRR78NXG
B085T6CKNP
B0C3GTTK3N
B08N5RTX2S
B09R9WR7YW
B08MWZCK7F
B00FQ3CEK0
B09VBB39RR
B07YFBR79S
B07YFCZDZ4
B0824BSQ95
B07FBLK2RP
B09GFKDQMN
B0BRXKVRG8
B09GFG8LBV
B07YFBTF9D
B00DJAOXEW
B09VB2T1DC
B08PPWQ7BK
B09VB3LPDT
B07CBVQRVY
B085281LXT
B085T7L3S6
B09FPDSPG4
B09QRPJHF9
B01K5N7JPA
B09QRWGNQ5
B07PJL6JTT
B09QRJJY52
B09QRM3CGZ
B000YM7O80
B01N6DW0Q1
B08N3MGVBP
B016Z8ARVM
B0BRXH4X4P
B00O1YEMKK
B0CLHF78JG
B07R11QGDZ
B00YT3KRFM
B07R11R57V
B07R276SWY
B00YT3K680
B07QXTGD6G
B09QJVMQBT
B09QJW9FY6
B0BRXPS886
B09RSQHK3Y
B08N64NXD6
B081KJWH89
B08N5LXPP6
B0824C1HKR
B09T9GBL8C
B09T98BDWY
B08N5N6RDP
B09QJVQKM9
B09QJVDF63
B09T95JT2C
B07H1G3L3G
B00FQ3GTI8
B0102P5TUS
B0102P5ZFC
B013PWXN0I
B07G4FBGYQ
B0100MX7HK
B000MFI7VM
B00DDZJKKA
B07HB8Z8R9
B00DDZJPXW
B00DDZJNRA
B07BYMS8PJ
B008L5JADO
B08N4LFTRW
B09SVS6W2B
B07H1J5JVC
B08N61473L
B07H1K7CVZ
B08N5ZGCC5
B00DDZK1EE
B00DDZKIMO
B07BY536RQ
B0BRF3VMSZ
B00IWYSSWI
B0824B86C8
B08249Y5H2
B08N3X27SN
B08N3CT8NN
B08N3374CG
B08N3K3YJF
B0824G1CC6
B00DDZKH6G
B000YLY5AQ
B00DDZJYWE
B07BYMS8NQ
B07Q33CRWX
B07Q33D1YG
B07BY5QFKG
B08WCKJ58B
B088NQNGB4

asins = parse_asins(asin_string)
Asin_list = ["{}".format(asin) for asin in asins]

print(Asin_list)

def remove_blacklisted_asins(master_db_path, blacklisted_y_path, Asin_list):
    # Read the master database and blacklisted Y CSV files into pandas dataframes
    master_db_df = pd.read_csv(master_db_path)
    blacklisted_y_df = pd.read_csv(blacklisted_y_path)

    # Combine the ASIN column from both dataframes into a single set for faster lookup
    blacklisted_asins = set(master_db_df['ASIN']).union(set(blacklisted_y_df['ASIN']))

    # Initialize counts for removed ASINs from each file
    master_db_removed_count = 0
    blacklisted_y_removed_count = 0

    # Iterate over each ASIN in the asin_list
    for asin in Asin_list:
        # Check if the ASIN is blacklisted
        if asin in blacklisted_asins:
            # If blacklisted, remove the corresponding row from the master database dataframe
            if asin in set(master_db_df['ASIN']):
                master_db_df = master_db_df[master_db_df['ASIN'] != asin]
                master_db_removed_count += 1
            # Also, remove from the blacklisted Y dataframe if present
            if asin in set(blacklisted_y_df['ASIN']):
                blacklisted_y_df = blacklisted_y_df[blacklisted_y_df['ASIN'] != asin]
                blacklisted_y_removed_count += 1

    # Write the updated master database dataframe back to the CSV file
    master_db_df.to_csv(master_db_path, index=False)

    # Return the counts of removed ASINs from each file
    return master_db_removed_count, blacklisted_y_removed_count

# Example usage:
master_db_path = "DataBaseFiles\Master_DB.csv"
blacklisted_y_path = "DataBaseFiles\Black_Listed_Y.csv"
master_db_removed, blacklisted_y_removed = remove_blacklisted_asins(master_db_path, blacklisted_y_path, Asin_list)
print(f"Removed {master_db_removed} ASINs from Master_DB.csv")
print(f"Removed {blacklisted_y_removed} ASINs from Black_Listed_Y.csv")
"""








